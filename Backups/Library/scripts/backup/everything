#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\CliDocumentation;use Phoundation\Core\Exception\ConfigurationDoesNotExistsException;use Phoundation\Core\Log\Log;use Phoundation\Data\Validator\ArgvValidator;use Phoundation\Databases\Exception\ExportException;use Phoundation\Exception\UnderConstructionException;use Phoundation\Filesystem\Directory;use Phoundation\Filesystem\File;use Phoundation\Filesystem\Restrictions;use Phoundation\Os\Processes\Commands\Databases\MysqlDump;use Phoundation\Utils\Config;


/**
 * Script system/backup/everything
 *
 * This command will backup *everything* related to this project to the default backup directory
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
CliDocumentation::usage('./pho system backup everything');

CliDocumentation::help('This command will backup *everything* related to this project to the default backup directory


ARGUMENTS


-t / --target PATH                      The target path where to backup to');

CliDocumentation::autoComplete([
    'arguments' => [
        '-t,--target'  => [
            'word'   => function ($word) { return Directory::new('/', '/')->scan('*' . $word . '*', GLOB_MARK | GLOB_ONLYDIR); },
            'noword' => function ()      { return Directory::new('/', '/')->scan('*'              , GLOB_MARK | GLOB_ONLYDIR); },
        ],
    ]
]);


// Validate arguments
$argv = ArgvValidator::new()
    ->select('-t,--target', true)->isDirectory('/', new Restrictions('/', true))
    ->validate();


throw new UnderConstructionException();
// Start backing up EVERYTHING
// Backup core database
Log::information(tr('Exporting core database ":database" to MySQL dump file ":file" this may take a while...', [
    ':file'     => $argv['file'],
    ':database' => $argv['database'],
]));

$file         = DIRECTORY_DATA . 'sources/' . $argv['file'];
$restrictions = Restrictions::new(DIRECTORY_DATA . 'sources/', true, 'Mysql exporter');

// Start the export
File::new($file, $restrictions)->checkWritable();

try {
    $database = Config::getArray('databases.sql.instances.' . $argv['database']);

} catch (ConfigurationDoesNotExistsException $e) {
    // No configuration available for specified databse
    throw ExportException::new(tr('Specified database ":database" is not configured', [
        ':database' => $argv['database']
    ]))->makeWarning();
}

MysqlDump::new($restrictions)
    ->setTimeout($argv['timeout'])
    ->addArguments(['-h', $database['host'], '-u', $database['user'], '-p' . $database['pass'], '-B', $database['name']])
    ->setTarget($file)
    ->setDatabases($argv['database'])
    ->dump();

Log::success(tr('Finished exporting core database ":database" to dump file ":file"', [
    ':file'     => $argv['file'],
    ':database' => $argv['database'],
]));

// Backup core site

// Backup site data

// Backup additional databases
    case 'mysql':
        Log::information(tr('Exporting to MySQL dump file ":file" from database ":database", this may take a while...', [
            ':file'     => $argv['file'],
            ':database' => $argv['database'],
        ]));

        $file         = DIRECTORY_DATA . 'sources/' . $argv['file'];
        $restrictions = Restrictions::new(DIRECTORY_DATA . 'sources/', true, 'Mysql exporter');

        // Start the export
        File::new($file, $restrictions)->checkWritable();

        try {
            $database = Config::getArray('databases.sql.instances.' . $argv['database']);

        } catch (ConfigurationDoesNotExistsException $e) {
            // No configuration available for specified databse
            throw ExportException::new(tr('Specified database ":database" is not configured', [
                ':database' => $argv['database']
            ]))->makeWarning();
        }

        MysqlDump::new($restrictions)
            ->setTimeout($argv['timeout'])
            ->addArguments(['-h', $database['host'], '-u', $database['user'], '-p' . $database['pass'], '-B', $database['name']])
            ->setTarget($file)
            ->setDatabases($argv['database'])
            ->dump();

        Log::success(tr('Finished exporting MySQL dump file ":file" from database ":database"', [
            ':file'     => $argv['file'],
            ':database' => $argv['database'],
        ]));

        break;

    case 'redis':
        // no break
    case 'mongo':
        // no break
    case 'mongodb':
        // no break
    case 'elastic':
        // no break
    case 'elasticsearch':
        // no break
        throw new UnderConstructionException();
}
