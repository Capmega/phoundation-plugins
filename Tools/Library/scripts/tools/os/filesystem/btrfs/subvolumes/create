#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\CliDocumentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Filesystem\Exception\FileExistsException;
use Phoundation\Filesystem\File;
use Phoundation\Filesystem\Directory;
use Phoundation\Filesystem\Restrictions;
use Phoundation\Security\Crypt;


/**
 * Script tools/os/filesystem/btrfs/subvolumes/create
 *
 *
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
$directory    = '/';
$restrictions = Restrictions::new('/', true, tr('btrfs subvolumes create'));

CliDocumentation::usage('./pho tools os filesystem btrfs subvolumes create PATH');

CliDocumentation::help('The BTRFS subvolume create script can create BTRFS subvolumes


ARGUMENTS


PATH                                    The path of the subvolume');

CliDocumentation::autoComplete([
    'positions' => [
        0 => [
            'word'   => function ($word) use ($directory, $restrictions) { return Directory::new($directory, $restrictions)->scan($word . '*'); },
            'noword' => function ()      use ($directory, $restrictions) { return Directory::new($directory, $restrictions)->scan('*'); },
        ],
    ]
]);


// Validate data
$argv = ArgvValidator::new()
    ->select('path')->isFile($directory, $restrictions, null)
    ->validate();


// Validate the target
try {
    Btrfs::new($argv['path'], $restrictions)
        ->subvolumes()
        ->create();

} catch (FileExistsException $e) {
    throw $e->makeWarning();
}


// Done!
Log::success(tr('Finished generating subvolume ":path"', [
    ':path' => $argv['path']
]));
