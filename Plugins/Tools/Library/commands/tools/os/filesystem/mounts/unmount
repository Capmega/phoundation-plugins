#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\CliDocumentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Filesystem\Directory;
use Phoundation\Filesystem\Mounts\Exception\NotMountedException;
use Phoundation\Os\Devices\Storage\Proc;
use Phoundation\Os\Processes\Commands\UnMount;


/**
 * Script tools/os/filesystem/mounts/mount
 *
 *
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
$types = Proc::getSupportedFiletypes();

CliDocumentation::autoComplete([
    'positions' => [
        '1' => [
            'word'   => function ($word) { return Directory::new(Directory::default($word), '/')->scan($word . '*'); },
            'noword' => function ()      { return Directory::new(                 '/', '/')->scan(        '*'); },
        ],
    ]
]);

CliDocumentation::usage('./pho tools os filesystem mounts umount TARGET
./pho tools os filesystem mounts umount TARGET [-f]
./pho tools os filesystem mounts umount TARGET [-l]');

CliDocumentation::help('This command will unmount the specified target

If the specified target is a mounted target directory, it will be unmounted.

If the specified target is a source device, then all its targets will be unmounted


ARGUMENTS


[-F,--force]                            If specified, the system will forcibly unmount the target, even when in use.
                                        (Very useful in case of an unreachable NFS system).

                                        Note that this option does not guarantee that umount command does not hang. It’s
                                        strongly recommended to use absolute paths without symlinks to avoid unwanted
                                        readlink(2) and stat(2) system calls on unreachable NFS in umount.

[-l,--lazy]                             Lazy unmount. Detach the filesystem from the file hierarchy now, and clean up
                                        all references to this filesystem as soon as it is not busy anymore.

                                        A system reboot would be expected in near future if you’re going to use this
                                        option for network filesystem or local filesystem with submounts. The
                                        recommended use-case for umount -l is to prevent hangs on shutdown due to an
                                        unreachable network share where a normal umount will hang due to a downed server
                                        or a network partition. Remounts of the share will not be possible.');


// Validate arguments
$argv = ArgvValidator::new()
    ->select('target')->isDirectory('/', '/')
    ->select('-l,--lazy')->isOptional()->isBoolean()
    ->validate();


// Unmount
try {
    UnMount::new()
        ->setForce(FORCE)
        ->setLazy($argv['lazy'])
        ->unmount($argv['target']);

} catch (NotMountedException $e) {
    // This is not a big deal, no backtrace and sucn needed
    throw NotMountedException::new(tr('Cannot unmount target ":target", it is not mounted', [
        ':target' => $argv['target']
    ]))->makeWarning();
}


// Done
Log::success(tr('UnMounted target ":target"', [
    ':target' => $argv['target']
]));